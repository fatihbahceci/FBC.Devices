// <auto-generated />
using FBC.Devices.DBModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBC.Devices.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20250927184554_SearchMetadata")]
    partial class SearchMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("FBC.Devices.DBModels.AddrType", b =>
                {
                    b.Property<int>("AddrTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AddrTypeId");

                    b.ToTable("AddrTypes");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DBUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSysAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("SysUsers");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeviceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.HasIndex("DeviceGroupId");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DeviceAddr", b =>
                {
                    b.Property<int>("DeviceAddrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Addr")
                        .HasColumnType("TEXT");

                    b.Property<int>("AddrTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PeriodicPingCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceAddrId");

                    b.HasIndex("AddrTypeId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceAddresses");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DeviceGroup", b =>
                {
                    b.Property<int>("DeviceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceGroupId");

                    b.ToTable("DeviceGroups");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DeviceSearchData", b =>
                {
                    b.Property<int>("DeviceSearchDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceAddrId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceAddrTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldTable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceSearchDataId");

                    b.HasIndex(new[] { "FieldTable", "DeviceId", "FieldName" }, "IDX_DeviceSearchData_Freq_Fields");

                    b.HasIndex(new[] { "DeviceId" }, "IX_DeviceSearchData_DeviceId");

                    b.HasIndex(new[] { "FieldTable", "DeviceId", "DeviceTypeId", "DeviceGroupId", "DeviceAddrId", "DeviceAddrTypeId", "FieldName" }, "UX_DeviceSearchData_Key")
                        .IsUnique();

                    b.ToTable("DeviceSearchMetas");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DeviceType", b =>
                {
                    b.Property<int>("DeviceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceTypeId");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.Device", b =>
                {
                    b.HasOne("FBC.Devices.DBModels.DeviceGroup", "DeviceGroup")
                        .WithMany()
                        .HasForeignKey("DeviceGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FBC.Devices.DBModels.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DeviceGroup");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.DeviceAddr", b =>
                {
                    b.HasOne("FBC.Devices.DBModels.AddrType", "AddrType")
                        .WithMany()
                        .HasForeignKey("AddrTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FBC.Devices.DBModels.Device", null)
                        .WithMany("DeviceAddresses")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddrType");
                });

            modelBuilder.Entity("FBC.Devices.DBModels.Device", b =>
                {
                    b.Navigation("DeviceAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
