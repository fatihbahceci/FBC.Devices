@page "/"
@using System.Net.NetworkInformation
@using FBC.Devices.Services
@inject NavigationManager Nav;
@inject DeviceDB db
@inject NotificationService NTF
@inject IJSRuntime JS
@* @attribute [Authorize(Roles = C.UserRoles.ViewDevices)] *@
<AuthorizeView Roles="@C.UserRoles.ViewDevices">
    <NotAuthorized>
        <CNotAuthorized />
    </NotAuthorized>
    <Authorized>
        <PageTitle>Home</PageTitle>

        <RadzenRow>
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left" Gap="0.5rem" class="rz-p-6">
                    <RadzenLabel Text="Search" Component="Ruknettin" />
                    <RadzenTextBox @bind-Value=@filterText Style="width: 100%;" Name="Ruknettin" Placeholder="Search..." />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left" Gap="0.5rem" class="rz-p-6">
                    <RadzenLabel Text="for" Component="DropDownMultipleChips" />
                    <RadzenDropDown @bind-Value=@filterKeys
                                    Data=@filterData
                                    Name="DropDownMultipleChips"
                                    SelectAllText="All"
                                    Multiple=true
                                    AllowClear=true
                                    Placeholder="Search for"
                                    ValueProperty="@nameof(SearchCriteriaInfo.Index)"
                                    Chips=true
                                    AllowFiltering=true
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    ClearSearchAfterSelection=true
                                    MaxSelectedLabels="9"
                                    Style="width: 100%;">
                        <Template Context="c">
                            @($"{c.Table}.{c.FieldName}")
                        </Template>
                    </RadzenDropDown>
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn Size="1">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left" Gap="0.5rem" class="rz-p-6">
                    <RadzenButton Icon="search" Click="ApplyFilter" Disabled="@auto" />
                </RadzenStack>
            </RadzenColumn>

        </RadzenRow>



        <RadzenDataList WrapItems="true" AllowPaging="false" Data="@data?.Data" TItem="Device">
            <Template Context="device">
                <RadzenCard Style="width:450px;">
                    <RadzenRow>
                        <RadzenColumn Size="8" class="rz-text-truncate">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Device Name</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="4" class="rz-text-align-end">
                            <RadzenLink Path="@($"{C.NAV.Edit.EditDevice}{device.DeviceId}")"><b>Edit</b></RadzenLink>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                        @* <RadzenImage Path="@order.Employee?.Photo" Style="width: 80px; height: 80px; border-radius: 50%" AlternateText="@(order.Employee?.FirstName + " " + order.Employee?.LastName)" /> *@
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.Body1"><b>@($"[{device.DeviceId:D4}] {device.Name}")</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Device Type</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(device.DeviceType?.Name ?? "--")</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Group</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(device.DeviceGroup?.Name ?? "--")</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Description</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(device.Description ?? "--")</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenAccordion Multiple="true">
                        <Items>
                            <RadzenAccordionItem Text="Details" Icon="accessibility">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Model</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@(device.DeviceModel ?? "--")</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Serial Number</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@(device.SerialNumber ?? "--")</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@(device.Location ?? "--")</b></RadzenText>

                                </RadzenStack>
                            </RadzenAccordionItem>
                            @if (!string.IsNullOrEmpty(device.Note))
                            {
                                <RadzenAccordionItem Text="Notes" Icon="account_balance_wallet">
                                    <pre>@device.Note</pre>
                                </RadzenAccordionItem>
                            }
                            @if (device.DeviceAddresses?.Any() == true)
                            {
                                <RadzenAccordionItem Text="Device Addresses" Icon="account_box">
                                    <RadzenStack Gap="10" Orientation="Orientation.Vertical">

                                        @foreach (var addr in device.DeviceAddresses)
                                        {
                                            BadgeStyle stStyle = BadgeStyle.Secondary;
                                            string stText = "DISABLED";
                                            string lastPing = "--";
                                            string lastSuccessPing = "--";
                                            if (device.IsActive && addr.PeriodicPingCheck)
                                            {
                                                var st = FBC.Devices.Services.DeviceAddressStatus.GetDeviceAddressStatusOrDefault(addr.DeviceAddrId);
                                                stStyle = st.IsSuccess ? BadgeStyle.Success : BadgeStyle.Danger;
                                                stText = st.IsSuccess ? "ACTIVE" : "PASSIVE";
                                                lastPing = st.LastPingTime == DateTime.MinValue ? "--" : st.LastPingTime.ToString("yyyy-MM-dd HH:mm:ss");
                                                lastSuccessPing = st.LastSuccessPingTime == DateTime.MinValue ? "--" : st.LastSuccessPingTime.ToString("yyyy-MM-dd HH:mm:ss");
                                            }

                                            <RadzenCard>
                                                <RadzenRow>
                                                    <RadzenColumn Size="8" class="rz-text-truncate">
                                                        <RadzenText TextStyle="TextStyle.Body1"><b>@($"[{addr.AddrType?.Name ?? "??"}] {addr.Addr}")</b></RadzenText>
                                                        <RadzenBadge BadgeStyle="@stStyle" Text=@stText />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="4" class="rz-text-align-end">
                                                        <RadzenButton Click="() => Ping(addr.Addr)"><b>Ping</b></RadzenButton>
                                                    </RadzenColumn>
                                                </RadzenRow>
                                                <RadzenAccordion>
                                                    <Items>
                                                        <RadzenAccordionItem Text="Details">
                                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Last Ping</RadzenText>
                                                            <pre>@lastPing</pre>
                                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Last Success Ping</RadzenText>
                                                            <pre>@lastSuccessPing</pre>
                                                            @if (!string.IsNullOrEmpty(addr.Password))
                                                            {
                                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">User Name</RadzenText>
                                                                @* <RadzenText TextStyle="TextStyle.Body1"><b>@(addr.Username ?? "--")</b></RadzenText> *@
                                                                <pre>@(addr.Username ?? "--")</pre>
                                                            }
                                                            @if (!string.IsNullOrEmpty(addr.Password))
                                                            {
                                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Password</RadzenText>
                                                                <RadzenButton Click="() => CopyPasswordToClipboard(addr.Password)"><b>Copy Password</b></RadzenButton>
                                                            }
                                                        </RadzenAccordionItem>
                                                    </Items>
                                                </RadzenAccordion>

                                            </RadzenCard>
                                        }
                                    </RadzenStack>
                                </RadzenAccordionItem>
                            }
                        </Items>
                    </RadzenAccordion>



                    <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                    <RadzenRow>
                        <RadzenColumn Size="8" class="rz-text-truncate">
                            <b>Device Enabled</b>
                        </RadzenColumn>
                        <RadzenColumn Size="4" class="rz-text-align-end">
                            <RadzenBadge BadgeStyle="@(device.IsActive? BadgeStyle.Success: BadgeStyle.Danger)" Text=@(device.IsActive ? "YES" : "NO") />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>


        <RadzenPager ShowPagingSummary="true"
                     AlwaysVisible="false"
                     PagingSummaryFormat="@pagingSummaryFormat"
                     HorizontalAlign="HorizontalAlign.Right"
                     Count="Count"
                     PageSize="@PageSize"
                     PageNumbersCount="5"
                     PageChanged="@PageChanged" />
    </Authorized>
</AuthorizeView>

@code {
    IEnumerable<int> filterKeys = new int[] { 1, 2, 4, 6 }; //Only device Name, Description, SerialNumber, and Note by default
    //for all use below
    // IEnumerable<int> filterKeys =  DeviceSearchDataHelper.SearchCriteriaKeys.Select(x => x.Index).ToArray();
    List<SearchCriteriaInfo> filterData = DeviceSearchDataHelper.SearchCriteriaKeys.ToList();
    string filterText = "";
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";

    private int Count => data?.NonFilteredCount ?? 0;
    private int PageSize => 5;
    private PagerEventArgs? pagerEventArgs;
    private DataList<Device>? data;
    private bool auto = false;

    async Task ApplyFilter()
    {
        // finalSelectedTitles = selectedTitles;
        LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        LoadData();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await dataFilter.AddFilter(new CompositeFilterDescriptor()
            // {
            //     Property = nameof(Device.Name),
            //     FilterValue = "",
            //     FilterOperator = FilterOperator.Contains
            // });
            // await dataFilter.Filter();
        }
    }


    void PageChanged(PagerEventArgs args)
    {
        pagerEventArgs = args;
        LoadData();
    }

    void LoadData()
    {
        // LoadDataArgs args = new LoadDataArgs();

        // if (pagerEventArgs != null)
        // {
        //     args.Skip = pagerEventArgs.Skip;
        //     args.Top = pagerEventArgs.Top;
        // }
        // else
        // {
        //     args.Skip = 0;
        //     args.Top = PageSize;
        // }
        // args.Filter = dataFilter.ToFilterString();

        //dataFilter.Filters
        int[] ids = [];
        bool hasFiltered = false;
        if (!string.IsNullOrEmpty(filterText))
        {
            var filterx = filterData.Where(x => filterKeys.Contains(x.Index)).ToList();
            ids = DeviceSearchDataHelper.GetDeviceIds(db.DB, filterx, filterText).ToArray();
            hasFiltered = true;
        }


        try
        {
            if (hasFiltered && (ids == null || ids.Length == 0))
            {
                data = null;
            }
            else if (!hasFiltered)
            {
                var r = db.Devices.ToList(
                    x => true,
                    (C.DBQ.Ex.Include, [
                        nameof(DeviceType),
                        nameof(DeviceGroup),
                        nameof(Device.DeviceAddresses),
                        nameof(Device.DeviceAddresses) + "."+ nameof(AddrType)
                    ])
                );
                data = new DataList<Device>()
                {
                    Data = r,
                    NonFilteredCount = r.Count
                };
            }
            else
            {
                var r = db.Devices.ToList(x => ids.Contains(x.DeviceId), 0, 0,
                    (C.DBQ.Ex.Include, [
                        nameof(DeviceType),
                        nameof(DeviceGroup),
                        nameof(Device.DeviceAddresses),
                        nameof(Device.DeviceAddresses) + "."+ nameof(AddrType)
                    ])
                );
                data = new DataList<Device>()
                {
                    Data = r.Data,
                    NonFilteredCount = r.NonFilteredCount
                };
            }
            // var r = db.Devices.ToList(
            //     new ACGetListRequest(args.Filter, args.OrderBy, args.Skip, args.Top),
            //     (C.DBQ.Ex.Include, [
            //         nameof(DeviceType),
            //         nameof(DeviceGroup),
            //         nameof(Device.DeviceAddresses),
            //         nameof(Device.DeviceAddresses) + "."+ nameof(AddrType)
            //     ])
            // );
            // data = new DataList<Device>()
            // {
            //     Data = r.Data,
            //     NonFilteredCount = r.NonFilteredCount
            // };
        }
        catch (Exception exc)
        {
            data = null;
            NTF.Notify(NotificationSeverity.Error, "Error!", exc.Message);
        }


        // data = GetDevices(args.Skip, args.Top, args.OrderBy, args.Filter);
        // StateHasChanged();
    }
    async Task CopyPasswordToClipboard(string password)
    {
        await JS.InvokeVoidAsync("copyTextToClipboard", password);
        NTF.Notify(NotificationSeverity.Info, "Info", "Password copied to clipboard!");
    }

    //Redirect to another page on load

    // protected override async Task OnInitializedAsync()
    // {
    //     await Task.Delay(1);
    //     Nav.NavigateTo(C.NAV.Edit.DeviceList);
    // }
    private async Task<IPStatus> Ping(string? ip)
    {
        try
        {
            NTF.Notify(NotificationSeverity.Info, "Ping", $"Pinging {ip}...");
            if (string.IsNullOrEmpty(ip))
            {
                NTF.Notify(NotificationSeverity.Error, "Error!", "IP Address is empty!");
                return IPStatus.Unknown;
            }
            using (var ping = new Ping())
            {
                var reply = await ping.SendPingAsync(ip, 1000);
                // return reply.Status == IPStatus.Success;
                NTF.Notify(reply.Status == IPStatus.Success ? NotificationSeverity.Success : NotificationSeverity.Error, "Ping", $"Ping to {ip} {reply.Status}");
                return reply.Status;
            }
        }
        catch (Exception exc)
        {
            NTF.Notify(NotificationSeverity.Error, "Error!", "Ping failed! " + exc.Message);
            return IPStatus.Unknown;
        }
    }

}